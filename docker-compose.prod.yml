version: '3.8'

services:
  # Reverse Proxy & Load Balancer
  nginx-proxy:
    image: nginx:alpine
    container_name: rayshine-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
      - nginx-logs:/var/log/nginx
    depends_on:
      - customer-app
      - provider-app
      - admin-app
      - backend-api
    restart: unless-stopped
    networks:
      - rayshine-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Backend API Server
  backend-api:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: rayshine-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
    env_file:
      - .env.production
    volumes:
      - backend-logs:/app/logs
      - backend-uploads:/app/uploads
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - rayshine-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Customer Website
  customer-app:
    build:
      context: .
      dockerfile: Dockerfile.customer
    container_name: rayshine-customer
    ports:
      - "3000:80"
    restart: unless-stopped
    networks:
      - rayshine-network
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Provider Portal (PWA)
  provider-app:
    build:
      context: .
      dockerfile: Dockerfile.provider
    container_name: rayshine-provider
    ports:
      - "3002:80"
    restart: unless-stopped
    networks:
      - rayshine-network
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Admin CRM
  admin-app:
    build:
      context: .
      dockerfile: Dockerfile.admin
    container_name: rayshine-admin
    ports:
      - "3003:80"
    restart: unless-stopped
    networks:
      - rayshine-network
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: rayshine-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
      - redis-logs:/var/log/redis
    restart: unless-stopped
    networks:
      - rayshine-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: rayshine-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - rayshine-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: rayshine-grafana
    ports:
      - "3004:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - rayshine-network

  # Log Aggregation - Loki
  loki:
    image: grafana/loki:2.9.0
    container_name: rayshine-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki-data:/loki
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
    restart: unless-stopped
    networks:
      - rayshine-network

  # Log Collection - Promtail
  promtail:
    image: grafana/promtail:2.9.0
    container_name: rayshine-promtail
    volumes:
      - /var/log:/var/log:ro
      - backend-logs:/var/log/backend:ro
      - nginx-logs:/var/log/nginx:ro
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: unless-stopped
    networks:
      - rayshine-network

  # Database Backup Service
  db-backup:
    image: postgres:15-alpine
    container_name: rayshine-db-backup
    environment:
      - PGPASSWORD=${SUPABASE_DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: >
      sh -c "
        apk add --no-cache dcron &&
        echo '0 2 * * * /backup.sh' | crontab - &&
        crond -f
      "
    restart: unless-stopped
    networks:
      - rayshine-network

  # SSL Certificate Manager (Let's Encrypt)
  certbot:
    image: certbot/certbot:latest
    container_name: rayshine-certbot
    volumes:
      - ./ssl:/etc/letsencrypt
      - ./ssl-challenges:/var/www/certbot
    command: >
      sh -c "
        while :; do
          certbot renew --webroot --webroot-path=/var/www/certbot --email ${ACME_EMAIL} --agree-tos --no-eff-email --staging;
          sleep 12h;
        done
      "
    restart: unless-stopped
    networks:
      - rayshine-network

  # File Storage & CDN (Minio for local development/testing)
  minio:
    image: minio/minio:latest
    container_name: rayshine-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    networks:
      - rayshine-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Health Check Service
  healthcheck:
    image: node:18-alpine
    container_name: rayshine-healthcheck
    volumes:
      - ./scripts/healthcheck.js:/app/healthcheck.js:ro
    working_dir: /app
    command: >
      sh -c "
        npm install axios &&
        while true; do
          node healthcheck.js;
          sleep 60;
        done
      "
    depends_on:
      - customer-app
      - provider-app
      - admin-app
      - backend-api
    restart: unless-stopped
    networks:
      - rayshine-network

# Named volumes for persistent data
volumes:
  redis-data:
    driver: local
  redis-logs:
    driver: local
  backend-logs:
    driver: local
  backend-uploads:
    driver: local
  nginx-cache:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local
  minio-data:
    driver: local

# Networks
networks:
  rayshine-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16