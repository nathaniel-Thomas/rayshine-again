# Multi-stage build for Customer Website (React/Vite)
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY apps/customer-website/package*.json ./apps/customer-website/
COPY packages/shared/package*.json ./packages/shared/

# Install dependencies
RUN npm ci && npm cache clean --force

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app

# Copy package files and install dependencies
COPY package*.json ./
COPY apps/customer-website/package*.json ./apps/customer-website/
COPY packages/shared/package*.json ./packages/shared/
RUN npm ci

# Copy source code
COPY packages/shared ./packages/shared
COPY apps/customer-website ./apps/customer-website

# Build shared package first
RUN cd packages/shared && npm run build

# Build customer website
ENV NODE_ENV=production
RUN cd apps/customer-website && npm run build

# Production image with nginx
FROM nginx:alpine AS runner

# Copy nginx configuration
COPY <<EOF /etc/nginx/conf.d/default.conf
server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Enable gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Cache static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Handle client-side routing
    location / {
        try_files \$uri \$uri/ /index.html;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    }

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}
EOF

# Copy built application
COPY --from=builder /app/apps/customer-website/dist /usr/share/nginx/html

# Create non-root user
RUN addgroup -g 1001 -S rayshine && \
    adduser -S rayshine -u 1001

# Set permissions
RUN chown -R rayshine:rayshine /usr/share/nginx/html && \
    chown -R rayshine:rayshine /var/cache/nginx && \
    chown -R rayshine:rayshine /var/log/nginx && \
    chown -R rayshine:rayshine /etc/nginx/conf.d
RUN touch /var/run/nginx.pid && \
    chown -R rayshine:rayshine /var/run/nginx.pid

# Switch to non-root user
USER rayshine

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost/health || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]